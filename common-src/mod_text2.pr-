Const
	all_text=-1;
End

Global
	matatextos=0;
	fading_text=0;
	struct ops_fuentes[20];
		margen;
		espacio;
	end
End

Local
	rand_y;
	rand_angle;
	soy_un_texto;
End

/*Process test_text();
Private
	mi_id_texto;
	retraso_repintado=5;
Begin
	stop_scroll(0);
	let_me_alone();
	delete_text(all_text);
	mi_id_texto=write(fpg_texto,0,0,0,"Hola, soy Pablo. Feliz Navidad");
	
	while(!key(_Esc))
		if(key(_a)) ops_fuentes[fpg_fuente].margen--; end
		if(key(_s)) ops_fuentes[fpg_fuente].margen++; end
		if(key(_q) and ops_fuentes[fpg_fuente].espacio>0) ops_fuentes[fpg_fuente].espacio--; end
		if(key(_w)) ops_fuentes[fpg_fuente].espacio++; end
		if(key(_z) and mi_id_texto.rand_y>0) mi_id_texto.rand_y--; end
		if(key(_x) and mi_id_texto.rand_y<5) mi_id_texto.rand_y++; end
		if(key(_u) and mi_id_texto.rand_angle>0) mi_id_texto.rand_angle-=1000; end
		if(key(_i) and mi_id_texto.rand_angle<30000) mi_id_texto.rand_angle+=1000; end
		if(key(_left)) mi_id_texto.angle-=1000; end
		if(key(_right)) mi_id_texto.angle+=1000; end
		if(mouse.left) mi_id_texto.size+=3; end
		if(mouse.right) mi_id_texto.size-=3; end
		mi_id_texto.x=mouse.x;
		mi_id_texto.y=mouse.y;
		if(retraso_repintado<5)
			retraso_repintado++;
		else
			retraso_repintado=0;
			mi_id_texto.accion=1;
		end
		frame; 
	end
	exit();
End*/

Process write_size(fpg_fuente,x,y,centrado,string texto,int size);
Private
	mi_ancho;
	mi_alto;
Begin
	resolution=global_resolution;
	z=-512;
	soy_un_texto=1;
	
	//1. pintamos texto en un mapa de bits
	graph=dibujame_el_texto(fpg_fuente,texto,ops_fuentes[fpg_fuente].margen,rand_y,rand_angle,0);
	
	//2. centramos
	centrame(file,graph,centrado);
	
	//3. permanecemos
	while(accion!=-1)
		if(accion==1) //redibujamos
			unload_map(0,graph);
			//1. pintamos texto en un mapa de bits
			graph=dibujame_el_texto(fpg_fuente,texto,ops_fuentes[fpg_fuente].margen,rand_y,rand_angle,0);
			
			//2. centramos
			centrame(file,graph,centrado);

			accion=0;
		end
		frame; 
	end
OnExit
	unload_map(0,graph);
End

Process write(fpg_fuente,x,y,centrado,string texto);
Private
	mi_ancho;
	mi_alto;
Begin
	resolution=global_resolution;
	z=-512;
	soy_un_texto=1;
	
	//1. pintamos texto en un mapa de bits
	graph=dibujame_el_texto(fpg_fuente,texto,ops_fuentes[fpg_fuente].margen,rand_y,rand_angle,0);
	
	//2. centramos
	centrame(file,graph,centrado);
	
	//3. permanecemos
	while(accion!=-1)
		if(accion==1) //redibujamos
			unload_map(0,graph);
			//1. pintamos texto en un mapa de bits
			graph=dibujame_el_texto(fpg_fuente,texto,ops_fuentes[fpg_fuente].margen,rand_y,rand_angle,0);
			
			//2. centramos
			centrame(file,graph,centrado);

			accion=0;
		end
		frame; 
	end
OnExit
	unload_map(0,graph);
End

Process write_fixed(fpg_fuente,x,y,centrado,string texto,int fixed_width);
Private
	mi_ancho;
	mi_alto;
Begin
	resolution=global_resolution;
	z=-512;
	soy_un_texto=1;
	
	//1. pintamos texto en un mapa de bits
	graph=dibujame_el_texto(fpg_fuente,texto,ops_fuentes[fpg_fuente].margen,rand_y,rand_angle,fixed_width);
	
	//2. centramos
	centrame(file,graph,centrado);
	
	//3. permanecemos
	while(accion!=-1)
		if(accion==1) //redibujamos
			unload_map(0,graph);
			//1. pintamos texto en un mapa de bits
			graph=dibujame_el_texto(fpg_fuente,texto,ops_fuentes[fpg_fuente].margen,rand_y,rand_angle,0);
			
			//2. centramos
			centrame(file,graph,centrado);

			accion=0;
		end
		frame; 
	end
OnExit
	unload_map(0,graph);
End

Function write_in_map(fpg_fuente,string texto,int centrado);
Begin
	//1. pintamos texto en un mapa de bits
	graph=dibujame_el_texto(fpg_fuente,texto,ops_fuentes[fpg_fuente].margen,rand_y,rand_angle,0);
	
	//2. centramos
	centrame(fpg_fuente,graph,centrado);
	
	return graph;
End

Function write_in_map_fixed(fpg_fuente,string texto,int centrado,fixed_width);
Begin
	//1. pintamos texto en un mapa de bits
	graph=dibujame_el_texto(fpg_fuente,texto,ops_fuentes[fpg_fuente].margen,rand_y,rand_angle,fixed_width);
	
	//2. centramos
	centrame(fpg_fuente,graph,centrado);
	
	return graph;
End

Function write_in_map_rand_y(fpg_fuente,string texto,int centrado,int rand_y);
Begin
	//1. pintamos texto en un mapa de bits
	graph=dibujame_el_texto(fpg_fuente,texto,ops_fuentes[fpg_fuente].margen,rand_y,rand_angle,0);
	
	//2. centramos
	centrame(fpg_fuente,graph,centrado);
	
	return graph;
End

Process write_int(fpg_fuente,x,y,centrado,*numero);
Private
	mi_ancho;
	mi_alto;
	anterior_numero;
Begin
	resolution=global_resolution;
	z=-512;
	soy_un_texto=1;
	
	//1. pintamos texto en un mapa de bits
	graph=dibujame_el_texto(fpg_fuente,*numero,ops_fuentes[fpg_fuente].margen,rand_y,rand_angle,0);
	
	//2. centramos
	centrame(file,graph,centrado);
	
	//3. permanecemos
	while(accion!=-1)
		if(anterior_numero!=*numero) //redibujamos
			unload_map(0,graph);
			//1. pintamos texto en un mapa de bits
			graph=dibujame_el_texto(fpg_fuente,*numero,ops_fuentes[fpg_fuente].margen,rand_y,rand_angle,0);
			
			//2. centramos
			centrame(file,graph,centrado);

			accion=0;
		end
		anterior_numero=*numero;
		frame; 
	end
OnExit
	unload_map(0,graph);
End

Process write_int_size(fpg_fuente,x,y,centrado,*numero,size);
Private
	mi_ancho;
	mi_alto;
	anterior_numero;
Begin
	resolution=global_resolution;
	z=-512;
	soy_un_texto=1;
	
	//1. pintamos texto en un mapa de bits
	graph=dibujame_el_texto(fpg_fuente,*numero,ops_fuentes[fpg_fuente].margen,rand_y,rand_angle,0);
	
	//2. centramos
	centrame(file,graph,centrado);
	
	//3. permanecemos
	while(accion!=-1)
		if(anterior_numero!=*numero) //redibujamos
			unload_map(0,graph);
			//1. pintamos texto en un mapa de bits
			graph=dibujame_el_texto(fpg_fuente,*numero,ops_fuentes[fpg_fuente].margen,rand_y,rand_angle,0);
			
			//2. centramos
			centrame(file,graph,centrado);

			accion=0;
		end
		anterior_numero=*numero;
		frame; 
	end
OnExit
	unload_map(0,graph);
End

Process write_var(fpg_fuente,x,y,centrado,string* variable);
Private
	mi_ancho;
	mi_alto;
	string anterior_numero;
Begin
	resolution=global_resolution;
	z=-512;
	soy_un_texto=1;
	
	//1. pintamos texto en un mapa de bits
	graph=dibujame_el_texto(fpg_fuente,*variable,ops_fuentes[fpg_fuente].margen,rand_y,rand_angle,0);
	
	//2. centramos
	centrame(file,graph,centrado);
	
	//3. permanecemos
	while(accion!=-1)
		if(anterior_numero!=*variable) //redibujamos
			unload_map(0,graph);
			//1. pintamos texto en un mapa de bits
			graph=dibujame_el_texto(fpg_fuente,*variable,ops_fuentes[fpg_fuente].margen,rand_y,rand_angle,0);
			
			//2. centramos
			centrame(file,graph,centrado);

			accion=0;
		end
		anterior_numero=*variable;
		frame; 
	end
OnExit
	unload_map(0,graph);
End

Function delete_text(cual);
Private
	mi_id_texto;
Begin
	if(cual==-1)
		while(mi_id_texto=get_id(0))
			if(exists(mi_id_texto))
				if(mi_id_texto.soy_un_texto==1)
					mi_id_texto.accion=-1;
				end
			end
		end
	else
		if(exists(cual))
			if(mi_id_texto.soy_un_texto==1)
				cual.accion=-1;
			end
		end
	end
End

Process fade_off_text(cual,steps);
Private
	mi_id_texto;
Begin
	if(fading_text) return; end
	fading_text=1;
	while(alpha>0)
		alpha-=steps;
		if(cual==-1)
			while(mi_id_texto=get_id(0))
				if(exists(mi_id_texto))
					if(mi_id_texto.soy_un_texto==1)
						mi_id_texto.alpha=alpha;
					end
				end
			end
		else
			if(exists(cual))
				if(mi_id_texto.soy_un_texto==1)
					mi_id_texto.alpha=alpha;
				end
			end
		end
		frame;
	end
	fading_text=0;
	delete_text(cual);
End

Function centrame(file,graph,centrado);
Private
	mi_ancho;
	mi_alto;
Begin
	mi_ancho=graphic_info(file,graph,G_WIDTH);
	mi_alto=graphic_info(file,graph,G_HEIGHT);

	switch(centrado)
		case 0: set_center(file,graph,0,0); end
		case 1: set_center(file,graph,mi_ancho/2,0); end
		case 2: set_center(file,graph,mi_ancho,0); end
		case 3: set_center(file,graph,0,mi_alto/2); end
		case 4: set_center(file,graph,mi_ancho/2,mi_alto/2); end
		case 5: set_center(file,graph,mi_ancho,mi_alto/2); end
		case 6: set_center(file,graph,0,mi_alto); end
		case 7: set_center(file,graph,mi_ancho/2,mi_alto); end
		case 8: set_center(file,graph,mi_ancho,mi_alto); end
	end
End

Function dibujame_el_texto(fpg_fuente,string texto,int margen,rand_y_max,rand_angle_max,fixed_width);
Private
	mi_alto_max;
	mi_ancho_total;
	caracter;
	caracter_anterior;
	mi_bpp;
	foo;
Begin
	if(fpg_fuente<0) return 0; end
	if(!map_exists(fpg_fuente,97) and !map_exists(fpg_fuente,65) and !map_exists(fpg_fuente,48))
		return 0;
	end
	file=fpg_fuente;
	if(!map_exists(fpg_fuente,97)) //si no hay minúsculas, uppercase-amos
		texto=ucase(texto);
	end
	
	//1. contar el espacio horizontal y vertical
	if(len(texto)>1)
		from foo=0 to len(texto)-1;
			caracter_anterior=caracter;
			caracter=asc(texto[foo]);
			if(caracter==32)
				x+=ops_fuentes[fpg_fuente].espacio+margen;
			else
				if(foo==0)
					x=(graphic_info(file,caracter,G_WIDTH)/2);
				elseif(foo==len(texto)-1)
					x+=(graphic_info(file,caracter_anterior,G_WIDTH)/2)+margen+(graphic_info(file,caracter,G_WIDTH));
				else
					x+=(graphic_info(file,caracter_anterior,G_WIDTH)/2)+margen+(graphic_info(file,caracter,G_WIDTH)/2);
				end
				if(graphic_info(file,asc(texto[foo]),G_HEIGHT)>mi_alto_max)
					mi_alto_max=graphic_info(file,asc(texto[foo]),G_HEIGHT)+(rand_y_max*2);
				end
			end	
		end
	else
		x=graphic_info(file,asc(texto[0]),G_WIDTH);
		mi_alto_max=graphic_info(file,asc(texto[0]),G_HEIGHT);
	end
	if(fixed_width>0)
		mi_ancho_total=fixed_width*(len(texto)+1);
	else
		mi_ancho_total=x;
	end
	x=0; y=0;

	//2.creamos el gráfico
	mi_bpp=graphic_info(file,48,G_DEPTH);
	graph=new_map(mi_ancho_total,mi_alto_max,mi_bpp);

	//DEBUG:
	/*drawing_map(0,graph);
	drawing_color(rgb(100,0,0));
	draw_box(0,0,mi_ancho_total,mi_alto_max);*/
	
	//3. ponemos todas las letracas
	from foo=0 to len(texto)-1;
		caracter_anterior=caracter;
		caracter=asc(texto[foo]);
		if(graphic_info(file,caracter,G_HEIGHT)>0 or caracter==32)
			if(rand_y_max>0) rand_y=rand(-rand_y_max*2,0); end
			if(rand_angle_max>0) rand_angle=rand(-rand_angle_max,rand_angle_max); end
			if(fixed_width)
				x=fixed_width+(fixed_width*(foo));
				y=mi_alto_max-(graphic_info(file,caracter,G_HEIGHT)/2)+rand_y;
				map_xputnp(0,graph,file,caracter,x,y,rand_angle,100,100,0);
			else
				if(caracter==32)
					x+=ops_fuentes[fpg_fuente].espacio+margen;
				else
					if(foo==0)
						x=(graphic_info(file,caracter,G_WIDTH)/2);
					else
						x+=(graphic_info(file,caracter_anterior,G_WIDTH)/2)+margen+(graphic_info(file,caracter,G_WIDTH)/2);
					end
					y=mi_alto_max-(graphic_info(file,caracter,G_HEIGHT)/2)+rand_y;
					map_xputnp(0,graph,file,caracter,x,y,rand_angle,100,100,0);
				end
			end
		else
			say("No se ha encontrado la letra "+chr(texto[foo])+" en el FPG "+file);
		end
	end
	
	//4. devolvemos el id del gráfico
	return graph;
End

Function set_text_color(int crap);
Begin
	//stub
End

Function text_width(int crap1,string crap2);
Begin
End

Function _load_fnt(string fuente_a_cargar);
Private
	string fuente_en_fpg;
Begin
	fuente_en_fpg=regex_replace("fnt","fpg",fuente_a_cargar);
	return load_fpg(fuente_en_fpg);
End